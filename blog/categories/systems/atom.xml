<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Systems | In Pursuit of Laziness]]></title>
  <link href="http://manishearth.github.io/blog/categories/systems/atom.xml" rel="self"/>
  <link href="http://manishearth.github.io/"/>
  <updated>2024-08-20T20:18:06+00:00</updated>
  <id>http://manishearth.github.io/</id>
  <author>
    <name><![CDATA[Manish Goregaokar]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Adventures in Systems Programming: C++ Local Statics]]></title>
    <link href="http://manishearth.github.io/blog/2015/06/26/adventures-in-systems-programming-c-plus-plus-local-statics/"/>
    <updated>2015-06-26T00:00:00+00:00</updated>
    <id>http://manishearth.github.io/blog/2015/06/26/adventures-in-systems-programming-c-plus-plus-local-statics</id>
    <content type="html"><![CDATA[<p>For a while now I’ve been quite interested in compilers and systems programming in general; and I
feel that an important feature of systems programming is that it’s relatively easy to figure out
what a line of code does (modulo optimizations) at the OS or hardware level<sup id="fnref:5" role="doc-noteref"><a href="#fn:5" class="footnote" rel="footnote">1</a></sup>. Conversely, it’s
important to know how your tools work more than ever in systems programming. So when I see a
language feature I’m not familiar with, I’m interested in finding out how it works under the hood.</p>

<p>I’m not a C++ expert. I can work on C++ codebases, but I’m not anywhere near knowing all of the
features and nuances of C++. However, I am pretty good at Rust and understand a decent portion of
the compiler internals. This gives me a great perspective — I’ve not yet internalized most C++
features to take them for granted, and I’m well equipped to investigate these features.</p>

<p>Today I came across some C++ code similar to the following<sup id="fnref:0" role="doc-noteref"><a href="#fn:0" class="footnote" rel="footnote">2</a></sup>:</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">foo</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">static</span> <span class="n">SomeType</span> <span class="n">bar</span> <span class="o">=</span> <span class="n">Env</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">someMethod</span><span class="p">();</span>
    <span class="k">static</span> <span class="n">OtherType</span> <span class="n">baz</span> <span class="o">=</span> <span class="n">Env</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">otherMethod</span><span class="p">(</span><span class="n">bar</span><span class="p">);</span>
<span class="p">}</span>

</code></pre></div></div>

<p>This code piqued my interest. Specifically, the local <code class="language-plaintext highlighter-rouge">static</code> stuff. I knew that when you have a
static like</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>static int FOO = 1;
</code></pre></div></div>

<p>the <code class="language-plaintext highlighter-rouge">1</code> is stored somewhere in the <code class="language-plaintext highlighter-rouge">.data</code> section of the program. This is easily verified with <code class="language-plaintext highlighter-rouge">gdb</code>:</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">static</span> <span class="kt">int</span> <span class="n">THING</span> <span class="o">=</span> <span class="mh">0xAAAA</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
 <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>

</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ g++ test.cpp -g
$ gdb a.out
(gdb) info addr THING
Symbol "THING" is static storage at address 0x601038.
(gdb) info symbol 0x601038
THING in section .data
</code></pre></div></div>

<p>This is basically a part of the compiled program as it is loaded into memory.</p>

<p>Similarly, when you have a <code class="language-plaintext highlighter-rouge">static</code> that is initialized with a function, it’s stored in the <code class="language-plaintext highlighter-rouge">.bss</code>
section, and initialized before <code class="language-plaintext highlighter-rouge">main()</code>. Again, easily verified:</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span><span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">bar</span><span class="p">()</span> <span class="p">{</span>
 <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"bar called</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
 <span class="k">return</span> <span class="mh">0xFAFAFA</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">static</span> <span class="kt">int</span> <span class="n">THING</span> <span class="o">=</span> <span class="n">bar</span><span class="p">();</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
 <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"main called</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
 <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ ./a.out 
bar called
main called
$ gdb a.out
(gdb) info addr THING
Symbol "THING" is static storage at address 0x601198.
(gdb) info symbol 0x601198
THING in section .bss
</code></pre></div></div>

<p>We can also leave statics uninitialized (<code class="language-plaintext highlighter-rouge">static int THING;</code>) and they will be placed in <code class="language-plaintext highlighter-rouge">.bss</code><sup id="fnref:8" role="doc-noteref"><a href="#fn:8" class="footnote" rel="footnote">3</a></sup>.</p>

<p>So far so good.</p>

<p>Now back to the original snippet:</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">foo</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">static</span> <span class="n">SomeType</span> <span class="n">bar</span> <span class="o">=</span> <span class="n">Env</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">someMethod</span><span class="p">();</span>
    <span class="k">static</span> <span class="n">OtherType</span> <span class="n">baz</span> <span class="o">=</span> <span class="n">Env</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">otherMethod</span><span class="p">(</span><span class="n">bar</span><span class="p">);</span>
<span class="p">}</span>

</code></pre></div></div>

<p>Naïvely one might say that these are statics which are scoped locally to avoid name clashes. It’s
not much different from <code class="language-plaintext highlighter-rouge">static THING = bar()</code> aside from the fact that it isn’t a global
identifier.</p>

<p>However, this isn’t the case. What tipped me off was that this called <code class="language-plaintext highlighter-rouge">Env()</code>, and I wasn’t so sure
that the environment was guaranteed to be properly initialized and available before <code class="language-plaintext highlighter-rouge">main()</code> is
called <sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">4</a></sup>.</p>

<p>Instead, these are statics which are initialized the first time the function is called.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span><span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">bar</span><span class="p">()</span> <span class="p">{</span>
 <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"bar called</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
 <span class="k">return</span> <span class="mh">0xFAFAFA</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">foo</span><span class="p">()</span> <span class="p">{</span>
 <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"foo called</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
 <span class="k">static</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">bar</span><span class="p">();</span>
 <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"Static is:"</span><span class="o">&lt;&lt;</span> <span class="n">i</span><span class="o">&lt;&lt;</span><span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
 <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"main called</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
 <span class="n">foo</span><span class="p">();</span>
 <span class="n">foo</span><span class="p">();</span>
 <span class="n">foo</span><span class="p">();</span>
 <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ g++ test.cpp
$ ./a.out
main called
foo called
bar called
Static is:16448250
foo called
Static is:16448250
foo called
Static is:16448250
</code></pre></div></div>

<p>Wait, “the first time the function is called”? <em>Alarm bells go off…</em> Surely there’s some cost to that! Let’s investigate.</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ gdb a.out
(gdb) disas bar
   // snip
   0x0000000000400c72 &lt;+15&gt;:    test   %al,%al
   0x0000000000400c74 &lt;+17&gt;:    jne    0x400ca4 &lt;_Z3foov+65&gt;
   0x0000000000400c76 &lt;+19&gt;:    mov    $0x6021f8,%edi
   0x0000000000400c7b &lt;+24&gt;:    callq  0x400a00 &lt;__cxa_guard_acquire@plt&gt;
   0x0000000000400c80 &lt;+29&gt;:    test   %eax,%eax
   0x0000000000400c82 &lt;+31&gt;:    setne  %al
   0x0000000000400c85 &lt;+34&gt;:    test   %al,%al
   0x0000000000400c87 &lt;+36&gt;:    je     0x400ca4 &lt;_Z3foov+65&gt;
   0x0000000000400c89 &lt;+38&gt;:    mov    $0x0,%r12d
   0x0000000000400c8f &lt;+44&gt;:    callq  0x400c06 &lt;_Z3barv&gt;
   0x0000000000400c94 &lt;+49&gt;:    mov    %eax,0x201566(%rip)        # 0x602200 &lt;_ZZ3foovE1i&gt;
   0x0000000000400c9a &lt;+55&gt;:    mov    $0x6021f8,%edi
   0x0000000000400c9f &lt;+60&gt;:    callq  0x400a80 &lt;__cxa_guard_release@plt&gt;
   0x0000000000400ca4 &lt;+65&gt;:    mov    0x201556(%rip),%eax        # 0x602200 &lt;_ZZ3foovE1i&gt;
   0x0000000000400caa &lt;+71&gt;:    mov    %eax,%esi
   0x0000000000400cac &lt;+73&gt;:    mov    $0x6020c0,%edi
   // snip
</code></pre></div></div>

<p>The instruction at <code class="language-plaintext highlighter-rouge">+44</code> calls <code class="language-plaintext highlighter-rouge">bar()</code>, and it seems to be surrounded by calls to some <code class="language-plaintext highlighter-rouge">__cxa_guard</code>
functions.</p>

<p>We can take a naïve guess at what this does: It probably just sets a hidden static flag on
initialization which ensures that it only runs once.</p>

<p>Of course, the actual solution isn’t as simple. It needs to avoid data races, handle errors, and
somehow take care of recursive initialization.</p>

<p>Let’s look at the <a href="http://mentorembedded.github.io/cxx-abi/abi.html#once-ctor">spec</a> and one <a href="http://www.opensource.apple.com/source/libcppabi/libcppabi-14/src/cxa_guard.cxx">implementation</a>, found by searching for
<code class="language-plaintext highlighter-rouge">__cxa_guard</code>.</p>

<p>Both of them show us the generated code for initializing things like local statics:</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">if</span> <span class="p">(</span><span class="n">obj_guard</span><span class="p">.</span><span class="n">first_byte</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span> <span class="n">__cxa_guard_acquire</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">obj_guard</span><span class="p">)</span> <span class="p">)</span> <span class="p">{</span>
      <span class="k">try</span> <span class="p">{</span>
      <span class="c1">// ... initialize the object ...;</span>
      <span class="p">}</span> <span class="k">catch</span> <span class="p">(...)</span> <span class="p">{</span>
        <span class="n">__cxa_guard_abort</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">obj_guard</span><span class="p">);</span>
        <span class="k">throw</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="c1">// ... queue object destructor with __cxa_atexit() ...;</span>
      <span class="n">__cxa_guard_release</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">obj_guard</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>
</code></pre></div></div>

<p>Here, <code class="language-plaintext highlighter-rouge">obj_guard</code> is our “hidden static flag”, with some other extra data.</p>

<p><code class="language-plaintext highlighter-rouge">__cxa_guard_acquire</code> and <code class="language-plaintext highlighter-rouge">__cxa_guard_release</code> acquire and release a lock to prevent recursive
initialization. So this program will crash:</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span><span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">void</span> <span class="nf">foo</span><span class="p">(</span><span class="kt">bool</span> <span class="n">recur</span><span class="p">);</span>

<span class="kt">int</span> <span class="nf">bar</span><span class="p">(</span><span class="kt">bool</span> <span class="n">recur</span><span class="p">)</span> <span class="p">{</span>
 <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"bar called</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
 <span class="k">if</span><span class="p">(</span><span class="n">recur</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">foo</span><span class="p">(</span><span class="nb">false</span><span class="p">);</span>
 <span class="p">}</span>
 <span class="k">return</span> <span class="mh">0xFAFAFA</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">foo</span><span class="p">(</span><span class="kt">bool</span> <span class="n">recur</span><span class="p">)</span> <span class="p">{</span>
 <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"foo called</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
 <span class="k">static</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">bar</span><span class="p">(</span><span class="n">recur</span><span class="p">);</span>
 <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"Static is:"</span><span class="o">&lt;&lt;</span> <span class="n">i</span><span class="o">&lt;&lt;</span><span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
<span class="p">}</span>



<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
 <span class="n">foo</span><span class="p">(</span><span class="nb">true</span><span class="p">);</span>
 <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ g++ test.cpp
$ ./a.out 
foo called
bar called
foo called
terminate called after throwing an instance of '__gnu_cxx::recursive_init_error'
  what():  std::exception
Aborted (core dumped)
</code></pre></div></div>

<p>Over here, to initialize <code class="language-plaintext highlighter-rouge">i</code>, <code class="language-plaintext highlighter-rouge">bar()</code> needs to be called, but <code class="language-plaintext highlighter-rouge">bar()</code> calls <code class="language-plaintext highlighter-rouge">foo()</code> which needs <code class="language-plaintext highlighter-rouge">i</code>
to be initialized, which again will call <code class="language-plaintext highlighter-rouge">bar()</code> (though this time it won’t recurse). If <code class="language-plaintext highlighter-rouge">i</code> wasn’t
<code class="language-plaintext highlighter-rouge">static</code> it would be fine, but now we have two calls trying to initialize <code class="language-plaintext highlighter-rouge">i</code>, and it’s unclear as
to which value should be used.</p>

<p>The implementation is pretty interesting. Before looking at the code my quick guess was that the
following would happen for local statics:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">obj_guard</code> is a struct containing a mutex and a flag with three states:
“uninitialized”, “initializing”, and “initialized”. Alternatively, use an atomic state indicator.</li>
  <li>When we try to initialize for the first time, the mutex is locked, the flag is set
to “initializing”, the mutex is released, the value is initialized, and the flag is set to “initialized”.</li>
  <li>If when acquiring the mutex, the value is “initialized”, don’t initialize again</li>
  <li>If when acquiring the mutex, the value is “initializing”, throw some exception</li>
</ul>

<p>(We need the tristate flag because without it recursion would cause deadlocks)</p>

<p>I suppose that this implementation would work, though it’s not the one being used. The
<a href="https://github.com/android/platform_bionic/blob/master/libc/bionic/__cxa_guard.cpp">implementation in bionic</a> (the Android version of the C stdlib) is similar; it
uses per-static atomics which indicate various states. However, it does not throw an exception when
we have a recursive initialization, it instead seems to deadlock<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">5</a></sup>. This is okay because the C++
spec says (<a href="http://www.open-std.org/jtc1/sc22/open/n2356/stmt.html#stmt.dcl">Section 6.7.4</a>)</p>

<blockquote>
  <p>If control re-enters the declaration (recursively) while the object is being initialized, the
behavior is undefined.</p>
</blockquote>

<p>However, the implementations in <a href="https://github.com/gcc-mirror/gcc/blob/master/libstdc%2B%2B-v3/libsupc%2B%2B/guard.cc">gcc/libstdc++</a> (also <a href="http://www.opensource.apple.com/source/libcppabi/libcppabi-14/src/cxa_guard.cxx">this version</a> of
<code class="language-plaintext highlighter-rouge">libcppabi</code> from Apple, which is a bit more readable) do something different. They use a global
recursive mutex to handle reentrancy. Recursive mutexes basically can be locked multiple times by a
single thread, but cannot be locked by another thread till the locking thread unlocks them the same
number of times. This means that recursion/reentrancy won’t cause deadlocks, but we still have one-
thread-at-a-time access. What these implementations do is:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">guard_object</code> is a set of two flags, one which indicates if the static is initialized,
and one which indicates that the static is being initialized (“in use”)</li>
  <li>If the object is initialized, do nothing (this doesn’t use mutexes and is cheap).
This isn’t exactly part of the implementation in the library, but is part of the generated code.</li>
  <li>If it isn’t initialized, acquire the global recursive lock</li>
  <li>If the object is initialized by the time the lock was acquired, unlock and return</li>
  <li>If not, check if the static is being initialized from the second <code class="language-plaintext highlighter-rouge">guard_object</code> flag. If it is
“in use”, throw an exception.</li>
  <li>If it wasn’t, mark the second flag of the static’s guard object as being “in use”</li>
  <li>Call the initialization function, bubble errors</li>
  <li>Unlock the global mutex</li>
  <li>Mark the second flag as “not in use”</li>
</ul>

<p>At any one time, only one thread will be in the process of running initialization routines, due to
the global recursive mutex. Since the mutex is recursive, a function (eg <code class="language-plaintext highlighter-rouge">bar()</code>) used for
initializing local statics may itself use (different) local statics. Due to the “in use” flag, the
initialization of a local static may not recursively call its parent function without causing an
error.</p>

<p>This doesn’t need per-static atomics, and doesn’t deadlock, however it has the cost of a global
mutex which is called at most once per local static. In a highly threaded situation with lots of
such statics, one might want to reevaluate directly using local statics.</p>

<p><a href="https://github.com/llvm-mirror/libcxxabi/blob/master/src/cxa_guard.cpp#L188">LLVM’s libcxxabi</a> is similar to the <code class="language-plaintext highlighter-rouge">libstdc++</code> implementation, but instead of a recursive
mutex it uses a regular mutex (on non-ARM Apple systems) which is unlocked before
<code class="language-plaintext highlighter-rouge">__cxa_guard_acquire</code> exits and tests for reentrancy by noting the thread ID in the guard object
instead of the “in use” flag. Condvars are used for waiting for a thread to stop using an object. On
other platforms, it seems to deadlock, though I’m not sure.</p>

<p>So here we have a rather innocent-looking feature that has some hidden costs and pitfalls. But now I
can look at a line of code where this feature is being used, and have a good idea of what’s
happening there. One step closer to being a better systems programmer!</p>

<p><em>Thanks to Rohan Prinja, Eduard Burtescu, and Nishant Sunny for reviewing drafts of this blog post</em></p>
<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:5" role="doc-endnote">
      <p>Emphasis on <em>relatively</em>. This article will show that it’s definitely not “easy” all the time. <a href="#fnref:5" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:0" role="doc-endnote">
      <p>This was JNI code which obtained a JNI environment and pulled out method/class IDs from it to be used later <a href="#fnref:0" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:8" role="doc-endnote">
      <p>Unless it has a constructor or otherwise isn’t made out of trivially constructible types; in this case it is treated similar to the previous case. <a href="#fnref:8" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:1" role="doc-endnote">
      <p>I checked later, and it was indeed the case that global statics are initialized before <code class="language-plaintext highlighter-rouge">Env()</code> is ready <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p>I later verified this with a modification of the crashing program above stuck inside some JNI Android code. <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
</feed>
